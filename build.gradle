/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */
  

  //ant.importBuild 'build.xml'
  
  apply plugin: 'java'
  
 sourceSets {
    test {
        java {
			srcDirs = ['main/test/server/src']
		}
	}
 }

/*sourceSet properly
sourceSets.main.java.srcDirs = ['/main/test/server/src'] 

 task execute(type:JavaExec){
    
   main = "com.google.refine.tests.TestMainTask"
   classpath = sourceSets.main.com.google.refine.tests
 }*/
 
 

 /*test {
   
   

   // set a system property for the test JVM(s)
   systemProperty 'some.prop', 'value'

   // explicitly include or exclude tests
   useJUnit {
        includeCategories 'com.google.refine.tests'
    }
   include 'main/test/server/src'

   // show standard out and standard error of the test JVM(s) on the console
   testLogging.showStandardStreams = true

   // set heap size for the test JVM(s)
   minHeapSize = "128m"
   maxHeapSize = "512m"

   // set JVM arguments for the test JVM(s)
   jvmArgs '-XX:MaxPermSize=256m'

   // listen to events in the test execution lifecycle
   beforeTest { descriptor ->
      logger.lifecycle("Running test: " + descriptor)
   }

   // Fail the 'test' task on the first test failure
   failFast = true

   // listen to standard out and standard error of the test JVM(s)
   onOutput { descriptor, event ->
      logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
   }
 }*/
 
 dependencies {
    testCompile(
            'junit:junit:4.12',
    )
}



/*task buildAnt(type: Build, group: "Building", description: "Runs the ant script")
{




	
	doLast
	{
		ant.build()
		
	}
}*/


